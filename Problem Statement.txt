The memory subsystem [with TLB, L1 Cache, L2 Cache and Main Memory] has following configuration:

- TLB: Identifier based TLB [with PID stored in each entry of the TLB. Invalidation to corresponding entries happens when a process terminates. You need to take care of shared pages explicitly]. Number of entries in TLB: 32 [Replacement: LRU Square Matrix]
- L1 Cache: 4KB, 32B, Victim cache with 8 blocks as fully associative victim set. The cache follows Write through and Look through. It follows LRU counter as replacement policy for victim set.
- L2 Cache: 32KB, 32B, 8 Way set associative cache. The cache follows Write back and look aside. It follows FIFO as replacement policy.
- Main Memory with Memory Management: 32MB Main memory with 16-bit LRU sliding as replacement policy. The memory management scheme used is Segmentation + Paging.
- Thrashing mechanism to implement: Working set strategy.

Common Assumptions:

- Virtual Memory contains the complete program. Hard disk is big enough to hold all the programs and No network file is accessed.
- First 2 blocks of the process (assume the page size and frame size same and is 512B) will be pre-paged into main memory before a process starts its execution.
- All other pages are loaded on demand [Assume the system supports dynamic loading. Also assume that the system has no dynamic linking support].
- Main memory follows Global replacement. Lower limit number of pages and upper limit number of pages per process should be strictly maintained.
- Page tables [and segment tables wherever applicable] of all the processes reside in main memory and will not be loaded into cache memory levels.